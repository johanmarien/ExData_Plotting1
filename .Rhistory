plot(x,y)
q()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl
swirl()
read.csv(path2csv, stringsAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(-(X:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r.version=="3.1.1", country=="US")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<"3.0.2", country=="IN")
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US | country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size >100500, r_os=="linux_gnu")
filter(cran, size > 100500, r_os=="linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > "100500"", r_os == "linux_gnu")
filter(cran, size > "100500", r_os == "linux_gnu")
info()
skip()
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package,ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > quantile(pack_sum$count, probs = 0.99))
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_counts <- filter(pack_sum, count > 465)
top_counts <- filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("1989 Mei 17")
mdy()
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 0, minutes = 7, seconds = 10)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart+hours(15) + minutes(50)
?with_tz
skip()
arrive
skip()
last_time
skip()
skip()
skip()
stopwatch
stopwatch()
# Rough calculation of the object size you want to load
# the size is in MB
calculateObjectSize <- function( rows = 0 , columns = 0) rows * columns * 8 / 2^20
estimatedObjectSize <- calculateObjectSize(2075259, 9)
# Set file variables
dataURL        <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
zippedDataFile <- "data_household_power_consumption.zip"
dataFile       <- "household_power_consumption.txt"
# set time series class to define the 'time' column
setClass('myTime')
setAs(
"character",
"myTime",
function(from) as.ts(from, format="%H:%M:%S")
)
# set time series class to define the 'date' column
setClass('myDate')
setAs(
"character",
"myDate",
function(from) as.Date(from, format="%d/%m/%Y")
)
# Download and load the data from the file
download.file(
url      = dataURL,
destfile = zippedDataFile,
method   = "libcurl")
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","myTime", rep("numeric", 7))
)
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
plot(data$global_active_power,  type="s"   main="Global Active Power",)
plot(data$global_active_power,  type="s"   main="Global Active Power")
plot(data$global_active_power,  type="s"   main="Global Active Power", na.exclude = TRUE)
plot(data$global_active_power,  type="s",   main="Global Active Power", na.exclude = TRUE)
plot(y= data$global_active_power,  type="h
plot(y= data$global_active_power,  type="h",   main="Global Active Power")
plot(data$global_active_power,  type="h",   main="Global Active Power")
View(data)
plot(data$global_active_power, format(data$date,format = "%a"),  type="h",   main="Global Active Power")
plot(data$global_active_power, format(data$date,format = "%a"),  type="h",   main="Global Active Power")
plot(data$global_active_power, format(data$date,format = "%a"),  type="h",   main="Global Active Power")
plot(x= data$global_active_power, y=format(data$date,format = "%a"),  type="h",   main="Global Active Power")
plot(x= data$global_active_power,  type="h",   main="Global Active Power")
plot(x= data$global_active_power,  type="s",   main="Global Active Power")
plot(data$global_active_power~format(data$date,format = "%a"),  type="s",   main="Global Active Power")
plot(data$global_active_power,y=format(data$date,format = "%a"),  type="s",   main="Global Active Power")
plot(x=data$global_active_power,y=format(data$date,format = "%a"),  type="s",   main="Global Active Power")
hist(x=data$global_active_power   main="Global Active Power")
hist(x=data$global_active_power,   main="Global Active Power")
hist(x=data$global_active_power,   main="Global Active Power", color="red")
hist(x=data$global_active_power,   main="Global Active Power", col="red")
hist(x=data$global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
with(data, plot(global_active_power,format(data$date,format = "%a")))
with(data, plot(global_active_power,data$date))
with(data, plot(data$date,global_active_power,))
with(data, plot(data$date,global_active_power,type="h"))
plot(x=data$global_active_power,y=data$date,  type="s",   main="Global Active Power")
plot(y=data$global_active_power,x=data$date,  type="s",   main="Global Active Power")
with(data, plot(data$date,global_active_power,type="l"))
View(data)
tail(data)
setClass('myTime')
setAs(
"character",
"myTime",
function(from) as.Date(from, format="%H:%M:%S")
)
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","myTime", rep("numeric", 7))
)
setClass('myDate')
setAs(
"character",
"myDate",
function(from) as.character.POSIXt(from, format="%d/%m/%Y")
)
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","myTime", rep("numeric", 7))
)
setAs(
"character",
"myTime",
function(from) as.character.POSIXt(from, format="%H:%M:%S")
)
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","myTime", rep("numeric", 7))
)
names(data) <- tolower(names(data))
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
setClass('myDate')
setAs(
"character",
"myDate",
function(from) as.Date(from, format="%d/%m/%Y")
)
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","myTime", rep("numeric", 7))
)
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
plot(y=data$global_active_power,x=data$date_time,  type="s",   main="Global Active Power")
curr_locale <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME","en_US.UTF-8")
plot(y=data$global_active_power,x=data$date_time,  type="s",   main="Global Active Power")
plot(y=data$global_active_power,x=data$date_time,  type="s",   main="Global Active Power")
plot(x=data$date_time,
y=data$global_active_power,
type="s",
main="Global Active Power",
ylab="Global Active Power (kilowatts)")
plot(x=data$date_time,
y=data$global_active_power,
type="s",
main="Global Active Power",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(x=data$date_time,
y=data$global_active_power,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
plot(x=data$date_time,
y=data$sub_metering_1,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
legend("topright", pch=2, col=c=("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=2, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=3, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=4, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=5, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=6, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=7, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=8, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=9, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=10, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=11, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=12, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=14, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=15, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=16, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=17, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=18, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=19, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=20, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright",  col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=21, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=22, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=23, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=24, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=25, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=0, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=1, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=30, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=29, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=28, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=27, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=26, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=20, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", pch=26, col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
legend("topright", lty="solid", col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
with(data, plot(data$date_time,data$sub_metering_2, type="s"))
with(data, plot(data$date_time,data$sub_metering_2, type="s"))
plot(x=data$date_time,
y=data$sub_metering_1,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
with(data, lines(data$date_time,data$sub_metering_2, type="s"))
with(data, lines(data$date_time,data$sub_metering_2, col="red"))
with(data, lines(data$date_time,data$sub_metering_3, col="blue"))
legend("topright", lty="solid", col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
# Set file variables
dataURL        <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
zippedDataFile <- "data_household_power_consumption.zip"
dataFile       <- "household_power_consumption.txt"
# set date class to define the 'date' column
setClass('myDate')
setAs(
"character",
"myDate",
function(from) as.Date(from, format="%d/%m/%Y")
)
data <- read.table(
file       = unz(zippedDataFile, dataFile),
header     = TRUE,
sep        = ";",
na.strings = "?",
colClasses = c("myDate","character", rep("numeric", 7))
)
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
# change the locale settings to render the weekdays in English
curr_locale <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME","en_US.UTF-8")
# Plot 1
hist(x=data$global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# Plot 2
plot(x=data$date_time,
y=data$global_active_power,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
# Plot 3
plot(x=data$date_time,
y=data$sub_metering_1,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
with(data,
lines(data$date_time,data$sub_metering_2, col="red"))
with(data,
lines(data$date_time,data$sub_metering_3, col="blue"))
legend("topright", lty="solid", col=c("black","red","blue"), legend=c("sub metering 1","sub metering 2","sub metering 3"))
# reset to the original locale settings
Sys.setlocale("LC_TIME",curr_locale)
setwd("/home/data/Projects/zelfstudie/coursera/dataScience/4 - Exploratory data analysis/Projects/ExData_Plotting1")
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
# open graphics file device - png
png(filename = "plot1.png",width = "480", height="480")
# Draw the first plot
hist(x=data$global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# close graphics device
dev.off()
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
# open graphics file device - png
png(filename = "plot1.png",width = "480", height="480", units = "px")
# Draw the first plot
hist(x=data$global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# close graphics device
dev.off()
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
# open graphics file device - png
png(filename = "plot1.png", width = 480, height = 480, units = "px")
# Draw the first plot
hist(x=data$global_active_power,
main="Global Active Power",
xlab="Global Active Power (kilowatts)",
col="red")
# close graphics device
dev.off()
names(data) <- tolower(names(data))
# Filter the data: only the records for the dates 2007-02-01 and 2007-02-02
# are needed for this excercise
data <- data[
data$date >= as.Date("2007-02-01")  &
data$date <= as.Date("2007-02-02"),]
data$date_time <- as.POSIXct(paste(data$date, data$time), format="%Y-%m-%d %H:%M:%S")
# change the locale settings to render the weekdays in English
curr_locale <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME","en_US.UTF-8")
# open graphics file device - png
png(filename = "plot1.png", width = 480, height = 480, units = "px")
# Draw the second plot
plot(x=data$date_time,
y=data$global_active_power,
type="s",
ylab="Global Active Power (kilowatts)",
xlab="")
# close graphics file device
dev.off()
# reset to the original locale settings
Sys.setlocale("LC_TIME",curr_locale)
